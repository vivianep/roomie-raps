#
# Copyright 2014-2016 CyberVision, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cmake_minimum_required(VERSION 2.8.8)
set(CMAKE_LIB "-l bcm2835")
macro(DECCHAR2HEX VAR VAL)
    if (${VAL} LESS 10)
        SET(${VAR} ${VAL})
    elseif(${VAL} EQUAL 10)
        SET(${VAR} "A")
    elseif(${VAL} EQUAL 11)
        SET(${VAR} "B")
    elseif(${VAL} EQUAL 12)
        SET(${VAR} "C")
    elseif(${VAL} EQUAL 13)
        SET(${VAR} "D")
    elseif(${VAL} EQUAL 14)
        SET(${VAR} "E")
    elseif(${VAL} EQUAL 15)
        SET(${VAR} "F")
    else()
        MESSAGE(FATAL_ERROR "Invalid format for hexidecimal character")
    endif()
endmacro(DECCHAR2HEX)

macro(DEC2HEX16 VAR VAL)
    if (${VAL} EQUAL 0)
        SET(${VAR} 0)
    else()
        SET(VAL2 ${VAL})
        SET(${VAR} "")

        foreach(i 0 4 8 12)
            MATH(EXPR VALCHAR "((${VAL}>>${i})&15)")
            DECCHAR2HEX(VALCHAR ${VALCHAR})
            SET(${VAR} "${VALCHAR}${${VAR}}")
        endforeach(i)
    endif()
endmacro(DEC2HEX16)

project (Kaa-cpp)
enable_language(CXX)

# Path to CMake's scripts.
set(CMAKE_MODULE_PATH 
	 ${CMAKE_MODULE_PATH}
	 ${CMAKE_CURRENT_SOURCE_DIR}/Modules
    )

#Checks whether avrogen script exists
set (WORKDIR ${CMAKE_CURRENT_SOURCE_DIR})
message("==================================")
if (WIN32)
    set (AVROGEN "avrogen.bat")
    if (NOT EXISTS "${WORKDIR}/${AVROGEN}")
       message("Error: avrogen.bat hasn't been found.")
    else()
       execute_process(COMMAND "${AVROGEN}"
                   WORKING_DIRECTORY ${WORKDIR}
                  )
    endif()
else()
    set (AVROGEN "avrogen.sh")
    if (NOT EXISTS "${WORKDIR}/${AVROGEN}")
       message("Error: avrogen.sh hasn't been found.")
    else()
       execute_process(COMMAND chmod +x ./${AVROGEN}
                   COMMAND "./${AVROGEN}" 
                   WORKING_DIRECTORY ${WORKDIR}
                  )
    endif()
endif()

#
# Sets common compilation flags.
# 
# NOTE: Platform specific compilation flags should be set 
# in the corresponding platform CMake script(s).
if (NOT MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -l bcm2835")
endif ()

if (NOT MSVC)
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -ggdb -l bcm2835")
endif ()

#Compiler specific flags
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=gnu++11 -stdlib=libc++ -l bcm2835")
endif()


if (CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++0x -l bcm2835" ) 
endif ()

#
# Sets maximum Kaa SDK log level.
#
# Logging constants:
# NONE  - 0
# FATAL - 1
# ERROR - 2
# WARN  - 3
# INFO  - 4
# DEBUG - 5
# TRACE - 6
if(NOT DEFINED KAA_MAX_LOG_LEVEL)
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(KAA_MAX_LOG_LEVEL 6)
    else()
        set(KAA_MAX_LOG_LEVEL 4)
    endif()
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_MAX_LOG_LEVEL=${KAA_MAX_LOG_LEVEL} -l bcm2835")

if (NOT KAA_WITHOUT_LOGGING AND KAA_WITH_SQLITE_LOG_STORAGE)
    set(SQLITE_LOG_STORAGE_ENABLED 1)
endif()

# Disables Kaa library modules.
message("==================================")
message("KAA_MAX_LOG_LEVEL=${KAA_MAX_LOG_LEVEL}")

if ( NOT KAA_WITHOUT_EVENTS )
    message("EVENTS ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_USE_EVENTS -l bcm2835")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/event/registration/EndpointRegistrationManager.cpp
            impl/event/registration/UserTransport.cpp
            impl/event/EventManager.cpp
            impl/event/EventTransport.cpp
    )
endif()

if ( NOT KAA_WITHOUT_NOTIFICATIONS ) 
    message("NOTIFICATIONS ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_USE_NOTIFICATIONS -l bcm2835")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/notification/NotificationManager.cpp
            impl/notification/NotificationTransport.cpp
    )
    
endif()

if ( NOT KAA_WITHOUT_CONFIGURATION )
    message("CONFIGURATION ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_USE_CONFIGURATION -l bcm2835")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/configuration/ConfigurationTransport.cpp
            impl/configuration/manager/ConfigurationManager.cpp
            impl/configuration/storage/FileConfigurationStorage.cpp
    )
endif()


if ( NOT KAA_WITHOUT_LOGGING )
    message("LOGGING ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_USE_LOGGING")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/log/LoggingTransport.cpp
            impl/log/LogCollector.cpp
            impl/log/LogStorageConstants.cpp
            impl/log/RecordFuture.cpp
            impl/log/MemoryLogStorage.cpp
            impl/log/DefaultLogUploadStrategy.cpp
    )

    if (KAA_WITH_SQLITE_LOG_STORAGE)
        message("SQLITE_LOG_STORAGE ENABLED")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_USE_SQLITE_LOG_STORAGE")
        set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/log/SQLiteDBLogStorage.cpp
        )
    endif() 
endif()

if ( NOT KAA_WITHOUT_OPERATION_TCP_CHANNEL )
    message("OPERATION_TCP_CHANNEL ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_DEFAULT_TCP_CHANNEL")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/channel/impl/DefaultOperationTcpChannel.cpp
    )
endif()

if ( NOT KAA_WITHOUT_OPERATION_LONG_POLL_CHANNEL )
    message("OPERATION_LONG_POLL_CHANNEL ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_DEFAULT_LONG_POLL_CHANNEL")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/channel/impl/DefaultOperationLongPollChannel.cpp
    )
endif()

if ( NOT KAA_WITHOUT_OPERATION_HTTP_CHANNEL )
    message("OPERATION_HTTP_CHANNEL ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_DEFAULT_OPERATION_HTTP_CHANNEL")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/channel/impl/DefaultOperationHttpChannel.cpp
    )
endif()

if ( NOT KAA_WITHOUT_BOOTSTRAP_HTTP_CHANNEL )
    message("BOOTSTRAP_HTTP_CHANNEL ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_DEFAULT_BOOTSTRAP_HTTP_CHANNEL")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/channel/impl/DefaultBootstrapChannel.cpp
    )
endif()

if ( NOT KAA_WITHOUT_CONNECTIVITY_CHECKER )
    message("CONNECTIVITY_CHECKER ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_DEFAULT_CONNECTIVITY_CHECKER")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/channel/connectivity/IPConnectivityChecker.cpp
    )
endif()

if ( NOT KAA_WITHOUT_OPERATION_HTTP_CHANNEL OR NOT KAA_WITHOUT_OPERATION_LONG_POLL_CHANNEL OR NOT KAA_WITHOUT_BOOTSTRAP_HTTP_CHANNEL )
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/http/HttpUrl.cpp
            impl/http/MultipartPostHttpRequest.cpp
            impl/http/HttpResponse.cpp
            impl/http/HttpClient.cpp
            impl/transport/HttpDataProcessor.cpp
            impl/channel/impl/AbstractHttpChannel.cpp
    )
endif()

if ( NOT KAA_WITHOUT_THREADSAFE OR NOT KAA_WITHOUT_OPERATION_LONG_POLL_CHANNEL OR NOT KAA_WITHOUT_OPERATION_TCP_CHANNEL)
    message("KAA_THREADSAFE ENABLED")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DKAA_THREADSAFE")
    set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
            impl/utils/ThreadPool.cpp
    )
endif()
message("==================================")

#
# Find third-party dependencies
#
find_package (Boost 1.54 REQUIRED COMPONENTS log system thread)
find_package (Avro REQUIRED)
find_package (Botan REQUIRED)


if (SQLITE_LOG_STORAGE_ENABLED)
    find_package (Sqlite3 REQUIRED)
endif()

if (WIN32 AND NOT CYGWIN AND NOT MSYS)
    if (CMAKE_SYSTEM_VERSION)
        string(REGEX REPLACE "^([0-9]+).*" "\\1" verMajor ${CMAKE_SYSTEM_VERSION})
        string(REGEX REPLACE "^[0-9]+.([0-9]+).*" "\\1" verMinor ${CMAKE_SYSTEM_VERSION})
        math(EXPR ver "((${verMajor} << 8) + ${verMinor})")
        DEC2HEX16(version ${ver})
        message(STATUS "CMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION}")
        message(STATUS "VERSION=${version}")
        add_definitions(-D_WIN32_WINNT=0x${version})
    endif() 

    add_definitions (/EHs)
    add_definitions (
        -DBOOST_REGEX_DYN_LINK
        -DBOOST_FILESYSTEM_DYN_LINK
        -DBOOST_SYSTEM_DYN_LINK
        -DBOOST_PROGRAM_OPTIONS_DYN_LINK
        -DBOOST_LOG_DYN_LINK
        -DBOOST_ALL_NO_LIB)
else()
    add_definitions (${Boost_LIB_DIAGNOSTIC_DEFINITIONS} -DBOOST_LOG_DYN_LINK)
endif()

# Sets path(s) to source files.
include_directories (${CMAKE_CURRENT_SOURCE_DIR} 
                     ${Boost_INCLUDE_DIRS}
                     ${AVRO_INCLUDE_DIRS} 
                     ${BOTAN_INCLUDE_DIR})
                     
if (SQLITE_LOG_STORAGE_ENABLED)
    include_directories (${SQLITE3_INCLUDE_DIR})
endif()

set (KAA_SOURCE_FILES ${KAA_SOURCE_FILES}
        impl/ClientStatus.cpp
        impl/KaaDefaults.cpp
        impl/Kaa.cpp
        impl/KaaClient.cpp
        impl/logging/Log.cpp
        impl/logging/DefaultLogger.cpp
        impl/security/KeyUtils.cpp
        impl/security/RsaEncoderDecoder.cpp
        impl/common/EndpointObjectHash.cpp
        impl/profile/ProfileTransport.cpp
        impl/bootstrap/BootstrapManager.cpp
        impl/bootstrap/BootstrapTransport.cpp
        impl/channel/SyncDataProcessor.cpp
        impl/channel/RedirectionTransport.cpp
        impl/channel/KaaChannelManager.cpp
        impl/kaatcp/KaaTcpCommon.cpp
        impl/kaatcp/KaaTcpParser.cpp
        impl/kaatcp/ConnackMessage.cpp
        impl/kaatcp/KaaSyncResponse.cpp
        impl/kaatcp/KaaTcpResponseProcessor.cpp
        impl/channel/connectivity/PingConnectivityChecker.cpp
        impl/channel/TransportProtocolIdConstants.cpp
        impl/channel/IPTransportInfo.cpp
        impl/failover/DefaultFailoverStrategy.cpp
        impl/context/AbstractExecutorContext.cpp
        impl/context/SimpleExecutorContext.cpp
        impl/KaaClientProperties.cpp
    )

# Builds Kaa libraries.
add_library(kaacpp_o OBJECT ${KAA_SOURCE_FILES})
add_library (kaacpp SHARED ./kaa $<TARGET_OBJECTS:kaacpp_o>)

target_link_libraries(kaacpp
                     ${BOTAN_LIBRARY}
                     ${AVRO_LIBRARIES}
                     ${Boost_LIBRARIES}
    )

if (SQLITE_LOG_STORAGE_ENABLED)
    target_link_libraries(kaacpp ${SQLITE3_LIBRARY})
endif()

if (WIN32 AND "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    target_link_libraries(kaacpp dbghelp)
endif()

if (NOT WIN32)
    target_link_libraries(kaacpp pthread)
endif()

add_library (kaacpp_s STATIC ./kaa $<TARGET_OBJECTS:kaacpp_o>)

message(STATUS "KAA WILL BE INSTALLED TO ${CMAKE_INSTALL_PREFIX} ")
install (DIRECTORY kaa/ DESTINATION include/kaa
    FILES_MATCHING PATTERN *.hpp)
install (TARGETS kaacpp kaacpp_s DESTINATION lib)
